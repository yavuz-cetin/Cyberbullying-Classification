# -*- coding: utf-8 -*-
"""LogReg tf-idf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EwQCt1o4tPsvdb0alE-rmfG09SgBFMnP
"""

import pandas as pd
df = pd.read_csv("data/processed_2.csv",encoding="utf-8")
unnamed_columns = [col for col in df.columns if 'Unnamed' in col]
df.drop(columns=unnamed_columns, inplace=True)
df['Tweets'] = df['Tweets'].astype(str)
df['Tweets'].dtype

df.head()

from sklearn.feature_extraction.text import TfidfVectorizer
c_vect = TfidfVectorizer()
x = c_vect.fit_transform(df['Tweets'])
y = df['Tag']

from sklearn.model_selection import train_test_split

x_train, x_test ,y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=101, stratify=y,shuffle = True)

x_train.shape, y_train.shape, x_test.shape, y_test.shape

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

param_grid = {
    'C': [0.01, 0.1, 1, 10, 100],
    'solver': ['liblinear', 'saga']
}

log_reg = LogisticRegression(max_iter=10000)

grid_search = GridSearchCV(log_reg, param_grid, cv=5)

grid_search.fit(x_train, y_train)

log_reg = grid_search.best_estimator_

log_reg_score = log_reg.score(x_test, y_test)

print(f"Best parameters: {grid_search.best_params_}")
print(f"Logistic Regression Accuracy with best parameters: {log_reg_score}")

from sklearn.model_selection import cross_val_score
log_reg_cv = cross_val_score(log_reg, x, y, cv=5)
print("Cross-Validation Scores:", log_reg_cv)
print("Mean Cross-Validation Score:", log_reg_cv.mean())

from sklearn.metrics import classification_report

y_predict_log_reg = log_reg.predict(x_test)

category_mapping = {
    0: 'not_cyberbullying',
    1: 'cyberbullying',
}

print(classification_report(y_test.map(category_mapping), [category_mapping[label] for label in y_predict_log_reg]))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_predict_log_reg)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['not cyberbullying', 'cyberbullying'])
disp.plot(cmap=plt.cm.Blues)
plt.title('Logistic Regression CV Confusion Matrix')
plt.show()