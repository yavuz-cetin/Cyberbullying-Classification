# -*- coding: utf-8 -*-
"""KNN tf-idf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V4V4pyWxYlAZ0zMULAO-yVDvoA0xaI5z
"""

import pandas as pd
df = pd.read_csv("data/processed.csv",encoding="utf-8")
unnamed_columns = [col for col in df.columns if 'Unnamed' in col]
df.drop(columns=unnamed_columns, inplace=True)
df['Tweets'] = df['Tweets'].astype(str)
df['Tweets'].dtype

df.head()

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vectorizer = TfidfVectorizer()

x = tfidf_vectorizer.fit_transform(df['Tweets'])

y = df['Tag']

from sklearn.model_selection import train_test_split

x_train, x_test ,y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=101, stratify=y,shuffle = True)

x_train.shape, y_train.shape, x_test.shape, y_test.shape

from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier

param_grid = {
    'n_neighbors': [5, 10, 15, 20],
    'weights': ['uniform', 'distance'],
    'algorithm': ['auto', 'brute']
}

knn = KNeighborsClassifier()

grid_search = GridSearchCV(knn, param_grid, cv=5)

grid_search.fit(x_train, y_train)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

best_knn = grid_search.best_estimator_

test_score = best_knn.score(x_test, y_test)

print("Best Parameters:", best_params)
print("Best Cross-validation Score:", best_score)
print("Test Set Score with Best Parameters:", test_score)

from sklearn.model_selection import cross_val_score

knn_cv = cross_val_score(best_knn, x, y, cv=5)
knn_cv.mean()
knn_cv

from sklearn.metrics import classification_report

y_predict = best_knn.predict(x_test)

category_mapping = {
    0: 'not_cyberbullying',
    1: 'religion',
    2: 'gender',
    3: 'ethnicity',
    4: 'age'
}

print(classification_report(y_test.map(category_mapping), [category_mapping[label] for label in y_predict]))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_predict)
label = ['not', 'religion', 'gender', 'ethnicity', 'age']
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label)
disp.plot(cmap=plt.cm.Blues)
plt.title('KNN tf-idf Confusion Matrix')
plt.show()