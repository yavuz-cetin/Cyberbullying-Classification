# -*- coding: utf-8 -*-
"""LogReg tf-idf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0UG8RpQxgezHTHkB4vcyJfRWh_SNiar
"""

import pandas as pd
df = pd.read_csv("data/processed.csv",encoding="utf-8")
unnamed_columns = [col for col in df.columns if 'Unnamed' in col]
df.drop(columns=unnamed_columns, inplace=True)
df['Tweets'] = df['Tweets'].astype(str)
df['Tweets'].dtype

df.head()

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

df_subset = df.sample(n=13000, random_state=42)

X_subset = df_subset['Tweets']
y_subset = df_subset['Tag']

X_train, X_val, y_train, y_val = train_test_split(X_subset, y_subset, test_size=0.2, random_state=42)

pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('logreg', LogisticRegression(max_iter=10000))
])

param_grid = {
    'tfidf__ngram_range': [(1, 1), (1, 2)],
    'tfidf__max_df': [0.9, 0.95, 1.0],
    'tfidf__min_df': [1, 5, 10],
    'logreg__C': [0.1, 1, 10],
    'logreg__solver': ['liblinear', 'saga']
}

grid_search = GridSearchCV(pipeline, param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print("Best Parameters:", best_params)
print("Best Cross-Validation Score:", best_score)

X_full = df['Tweets']
y_full = df['Tag']

final_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(
        ngram_range=best_params['tfidf__ngram_range'],
        max_df=best_params['tfidf__max_df'],
        min_df=best_params['tfidf__min_df']
    )),
    ('logreg', LogisticRegression(
        C=best_params['logreg__C'],
        solver=best_params['logreg__solver'],
        max_iter=10000
    ))
])

X_train, X_val, y_train, y_val = train_test_split(X_full, y_full, test_size=0.2, random_state=42)
final_pipeline.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score

scores = cross_val_score(final_pipeline, X_full, y_full, cv=5, n_jobs=-1)
print("Cross-Validation Scores:", scores)
print("Mean Cross-Validation Score:", scores.mean())

from sklearn.metrics import classification_report

y_predict_log_reg = final_pipeline.predict(X_val)

category_mapping = {
    0: 'not_cyberbullying',
    1: 'religion',
    2: 'gender',
    3: 'ethnicity',
    4: 'age'
}

print(classification_report(y_val.map(category_mapping), [category_mapping[label] for label in y_predict_log_reg]))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_val, y_predict_log_reg)
label = ['not', 'religion', 'gender', 'ethnicity', 'age']
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label)
disp.plot(cmap=plt.cm.Blues)
plt.title('Logistic Regression tf-idf Confusion Matrix')
plt.show()