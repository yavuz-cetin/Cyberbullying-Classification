# -*- coding: utf-8 -*-
"""MNB tf-idf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1URWJnIHhyfDugQLEKY8g6zNlyd7QEK2h
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB

data = pd.read_csv('data/processed.csv')
data['Tweets'].fillna('', inplace=True)
X = data['Tweets']
y = data['Tag']

tfidf_vectorizer = TfidfVectorizer()
X_counts = tfidf_vectorizer.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_counts, y, test_size=0.2, random_state=42)

nb_model = MultinomialNB()

param_grid = {
    'alpha': [0.01, 0.1, 1, 10, 100]
}

grid_search = GridSearchCV(nb_model, param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print("Best Parameters:", best_params)
print("Best Cross-Validation Score (from GridSearchCV):", best_score)

best_nb_model = grid_search.best_estimator_
test_score = best_nb_model.score(X_test, y_test)
print("Test Score with the best model:", test_score)

cv_scores = cross_val_score(best_nb_model, X_counts, y, cv=5)
print("Cross-Validation Scores with the best model:", cv_scores)
print("Average Cross-Validation Score with the best model:", cv_scores.mean())

from sklearn.metrics import classification_report

y_predict = best_nb_model.predict(X_test)

category_mapping = {
    0: 'not_cyberbullying',
    1: 'religion',
    2: 'gender',
    3: 'ethnicity',
    4: 'age'
}

print(classification_report(y_test.map(category_mapping), [category_mapping[label] for label in y_predict]))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_predict)
label = ['not', 'religion', 'gender', 'ethnicity', 'age']
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label)
disp.plot(cmap=plt.cm.Blues)
plt.title('NB tf-idf Confusion Matrix')
plt.show()